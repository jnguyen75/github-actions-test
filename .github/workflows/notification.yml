name: Post Build Notification

on:
  workflow_call:
    inputs:
      commit_status:
        description: Commit status to set (one of "error", "failure", "pending", "success").
        default: success
        required: true
        type: string
      status_context:
        description: A string label to differentiate this status from the status of other systems.
        required: true
        type: string
      max_previous_commits:
        description: Maximum number of previous commits to check for a commit status.
        default: 50
        type: number

jobs:
  post-build:
    runs-on: ubuntu-latest
    steps:
      - name: Set final commit status
        uses: myrotvorets/set-commit-status-action@v1.1.7
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ inputs.commit_status }}
          context: ${{ inputs.status_context }}
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: ${{ inputs.max_previous_commits }}
      - name: Get previous commit state
        id: previous-commit
        timeout-minutes: 1
        run: |
          for i in {1..${{ inputs.max_previous_commits }}}
          do
              previous_rev=$(git rev-parse HEAD~$i)
              echo "Previous commit: $previous_rev"

              previous_state=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/${{ github.repository }}/commits/$previous_rev/status | \
                  jq -r '.statuses[] | select(.context == "${{ inputs.status_context }}") | .state')
              echo "Previous state: $previous_state"
              if [[ $previous_state != "" && $previous_state != "pending" ]]; then
                  break
              else
                  sleep 1
              fi
          done
          
          echo "sha=$parent_sha" >> "$GITHUB_OUTPUT"
          echo "state=$previous_state" >> "$GITHUB_OUTPUT"
      - name: Send Slack Message
        if: ${{ steps.previous-commit.outputs.state != inputs.commit_status }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: "C05GQNZF4Q2"
          payload: |
            {
              "attachments": [{
                "color": "${{ inputs.commit_status == 'success' && '#238823' || '#D2222D' }}",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "${{ github.repository }} run ${{ inputs.commit_status }}",
                      "emoji": true
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Branch:*\n<${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.event.head_commit.message }}>"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Run:*\n<$${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ inputs.status_context }} #${{ github.run_number }}>"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Commit Author:*\n${{ github.event.head_commit.author.name }}"
                      }
                    ]
                  }
                ]
              }]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
